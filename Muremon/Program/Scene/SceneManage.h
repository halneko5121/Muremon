//---------------------------------------------
//      シーンの管理を行う
//			作成者:平野
//---------------------------------------------

#ifndef _SCENEMANAGE_H_
#define _SCENEMANAGE_H_

//include
#include "Library/Graphics/DirectGraphics.h"
#include "Library/Input/DirectInput.h"
#include "Library/Font/DirectFont.h"

//enum
enum SCENE_NAME
{
	LOGO,			//ロゴ
    TITLE,			//タイトル
	PROLOGUE,		//あらすじ
	TUTORIAL,		//ゲーム操作説明
    GAME_REFRESH,	//ゲーム画面(すっきり)
	GAME_NORMAL,	//ゲーム画面(ノーマル)
	ENDING,			//エンディング
    RANKING,		//ランキング画面
	GAME_END,		//終わり
};

class C_SceneManage
{
protected:
    DWORD               sceneID;    //シーンの番号
	LPDIRECT3DDEVICE9	pDevice;    //デバイス
	C_DInputKey			*pInput;    //インプットクラスのインスタンス
    C_DFont             *pFont;     //フォントクラスのインスタンス

public:
    //////////////////////////////////////////////////////////
    //
    //      説明　：コンストラクタ
    //
    //////////////////////////////////////////////////////////
    C_SceneManage();    
	
	//////////////////////////////////////////////////////////
    //
    //      説明　：デストラクタ(仮想関数、何もしない)
    //
    //////////////////////////////////////////////////////////
    virtual ~C_SceneManage();

	//////////////////////////////////////////////////////////
    //
    //      説明　：シーンの初期化処理(メンバ初期化)
    //      引数　：LPDIRECT3DDEVICE9   pDev    デバイス
    //              DInput              *pInput インプットクラスへのポインタ
    //              DFont               *pFont  フォントクラスへのポインタ
    //　　　戻り値：なし
    //
    //////////////////////////////////////////////////////////
	virtual void InitScene(LPDIRECT3DDEVICE9 apDev , C_DFont* apFont,int score);

	//////////////////////////////////////////////////////////
    //
    //      説明　：シーン継続処理(純粋仮想関数)
    //      引数　：なし
    //　　　戻り値：なし
    //
    //////////////////////////////////////////////////////////
	virtual bool RunScene() = 0;

	//////////////////////////////////////////////////////////
    //
    //      説明　：シーン描画処理(純粋仮想関数)
    //      引数　：なし
    //　　　戻り値：なし
    //
    //////////////////////////////////////////////////////////
    virtual void ControlScene(void) = 0;

    //////////////////////////////////////////////////////////
    //
    //      説明　：シーン描画処理(純粋仮想関数)
    //      引数　：なし
    //　　　戻り値：なし
    //
    //////////////////////////////////////////////////////////
    virtual void DrawScene(void) = 0;

	//////////////////////////////////////////////////////////
    //
    //      説明　：シーン終了処理(純粋仮想関数)
    //      引数　：なし
    //　　　戻り値：なし
    //
    //////////////////////////////////////////////////////////
	virtual int EndScene(void) = 0;

    //////////////////////////////////////////////////////////
    //
    //      説明　：シーンの変更を行う
    //      引数　：DWORD   nextID  次のシーンの番号
    //　　　戻り値：なし
    //
    //////////////////////////////////////////////////////////
    void ChangeScene(DWORD nextID);

    //////////////////////////////////////////////////////////
    //
    //      説明　：当たり判定を行う
    //      引数　：D3DXVECTOR2 centerPos   当たりをとる物体の中心座標
    //              D3DXVECTOR2 size        当たりをとる物体のサイズ
    //              DInput      *pInput     インプットクラスへのポインタ
    //　　　戻り値：なし
    //
    //////////////////////////////////////////////////////////
    bool HitCheck(D3DXVECTOR2 centerPos , D3DXVECTOR2 size);



    //-情報取得関数-

    //////////////////////////////////////////////////////////
    //
    //      説明　：シーン番号の取得
    //      引数　：なし
    //　　　戻り値：DWORD   シーンの番号
    //
    //////////////////////////////////////////////////////////
    DWORD GetSceneID(void)  {return sceneID;}
};

#endif	//_SCENEMANAGE_H_